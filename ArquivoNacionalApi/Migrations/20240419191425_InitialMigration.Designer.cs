// <auto-generated />
using System;
using ArquivoNacionalApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArquivoNacionalApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240419191425_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArquivoNacionalApi.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("filePath");

                    b.HasKey("Id");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("ArquivoNacionalApi.Domain.Entities.DocumentMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("context");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasMaxLength(100000)
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<string>("SocialMarkers")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("socialMarkers");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentMetadata", (string)null);
                });

            modelBuilder.Entity("ArquivoNacionalApi.Domain.Entities.IndexPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("IndexPoint", (string)null);
                });

            modelBuilder.Entity("ArquivoNacionalApi.Domain.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlayerLimit")
                        .HasColumnType("int")
                        .HasColumnName("playerLimit");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("ArquivoNacionalApi.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DocumentMetadataIndexPoint", b =>
                {
                    b.Property<Guid>("DocumentsMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IndexPointsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentsMetadataId", "IndexPointsId");

                    b.HasIndex("IndexPointsId");

                    b.ToTable("DocumentMetadataIndexPoint");
                });

            modelBuilder.Entity("ArquivoNacionalApi.Domain.Entities.DocumentMetadata", b =>
                {
                    b.HasOne("ArquivoNacionalApi.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArquivoNacionalApi.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArquivoNacionalApi.Domain.Entities.Session", b =>
                {
                    b.HasOne("ArquivoNacionalApi.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ArquivoNacionalApi.Domain.Entities.User", b =>
                {
                    b.HasOne("ArquivoNacionalApi.Domain.Entities.Session", "Session")
                        .WithMany("Users")
                        .HasForeignKey("SessionId");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("DocumentMetadataIndexPoint", b =>
                {
                    b.HasOne("ArquivoNacionalApi.Domain.Entities.DocumentMetadata", null)
                        .WithMany()
                        .HasForeignKey("DocumentsMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArquivoNacionalApi.Domain.Entities.IndexPoint", null)
                        .WithMany()
                        .HasForeignKey("IndexPointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArquivoNacionalApi.Domain.Entities.Session", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
